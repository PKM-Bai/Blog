<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>22-06-28 推荐Win10系统的4个实用小软件</title>
      <link href="/2022/06/28/22-06-28-win10-shi-yong-xiao-ruan-jian-tui-jian/"/>
      <url>/2022/06/28/22-06-28-win10-shi-yong-xiao-ruan-jian-tui-jian/</url>
      
        <content type="html"><![CDATA[<p>目前经常使用的一些基于Windows10系统的功能软件，如果你还没有安装使用过，并且感兴趣的可以尝试用用看。</p><h2 id="1-Snipaste-截图工具（强烈推荐）"><a href="#1-Snipaste-截图工具（强烈推荐）" class="headerlink" title="1.Snipaste 截图工具（强烈推荐）"></a>1.Snipaste 截图工具（强烈推荐）</h2><p>​这个截图工具是真的实用，我最喜欢这个软件里的贴图功能，可以直接把你刚刚截下的图再贴到屏幕上，使用最多的地方一般是代码遇到问题在网上已经找到解决问题的时候，可以把解决问题的答案截下来并贴到屏幕上，然后再切回代码编辑器解决问题，这样就不用浏览器跟编辑器来回切换了。又或者是需要数据或者代码对比的时候也可以把其中一个截下来贴到屏幕上直接和另外一个对比，省去来回切换的时间。<img src="/2022/06/28/22-06-28-win10-shi-yong-xiao-ruan-jian-tui-jian/image-20220628013334137.png" alt="贴图功能"></p><p>​当然也有一些其他功能可以慢慢研究，比如在截图窗口可以直接查看当前光标位置的颜色值并且复制，对于前端开发需要提取页面某个元素的颜色的时候也很有用。</p><p><img src="/2022/06/28/22-06-28-win10-shi-yong-xiao-ruan-jian-tui-jian/image-20220628012749709.png" alt="颜色值取样"></p><p>下载方式：</p><p>​推荐到<a href="https://www.snipaste.com/download.html">官网</a>下载，或者微软商店搜索”Snipaste”下载安装<img src="/2022/06/28/22-06-28-win10-shi-yong-xiao-ruan-jian-tui-jian/image-20220628013721150.png" alt="Snipaste 官网"></p><p><img src="/2022/06/28/22-06-28-win10-shi-yong-xiao-ruan-jian-tui-jian/image-20220628014024872.png" alt="微软商店搜索&quot;Snipaste&quot;"></p><h2 id="2-TranslucentTB-任务栏美化"><a href="#2-TranslucentTB-任务栏美化" class="headerlink" title="2.TranslucentTB  任务栏美化"></a>2.TranslucentTB  任务栏美化</h2><p>​主要作用是可以将任务栏背景变为透明化或者毛玻璃样式的半透明，可能有的人最开始就认为Win10默认的任务栏背景颜色太丑太多余，就直接设置成了自动隐藏任务栏，但不能直接查看到当前已执行的程序任务以及时间等等任务栏上的信息，用了这个软件就可以让任务栏的背景颜色透明化，桌面看起来更整洁好看。</p><p><img src="/2022/06/28/22-06-28-win10-shi-yong-xiao-ruan-jian-tui-jian/image-20220628005510371.png" alt="任务栏透明化"></p><p><img src="/2022/06/28/22-06-28-win10-shi-yong-xiao-ruan-jian-tui-jian/image-20220628010313335.png" alt="任务栏背景可设置的类型模式"><img src="/2022/06/28/22-06-28-win10-shi-yong-xiao-ruan-jian-tui-jian/image-20220628010332541.png" alt="在桌面与焦点窗口最大化||全屏(无边框)之间切换任务栏显示模式">       </p><p>下载方式：</p><p>​可以在Microsoft Store 微软商店搜索”TranslucentTB”下载或者<a href="https://translucenttb.en.softonic.com/">https://translucenttb.en.softonic.com</a>，当然网上也有很多资源也可以直接搜，但是官方版的是没有中文的</p><p>​推荐到微软商店中搜索”TranslucentTB(汉化 by tpxxn)”这个是带有汉化的</p><p><img src="/2022/06/28/22-06-28-win10-shi-yong-xiao-ruan-jian-tui-jian/image-20220628011517440.png" alt="微软商店搜索&quot;TranslucentTB&quot;"></p><h2 id="3-EarTrumpet-可替代Windows10自带的音量控制器"><a href="#3-EarTrumpet-可替代Windows10自带的音量控制器" class="headerlink" title="3.EarTrumpet 可替代Windows10自带的音量控制器"></a>3.EarTrumpet 可替代Windows10自带的音量控制器</h2><p>​EarTrumpet 是一款功能强大的 Windows 音量控制应用，可以很直接、直观的“控制”和”观察”你每个应用的音量。</p><p>​<img src="/2022/06/28/22-06-28-win10-shi-yong-xiao-ruan-jian-tui-jian/image-20220628025218232.png" alt="EarTrumpet音量控制面板"></p><p>下载方式：<a href="https://eartrumpet.en.softonic.com/">https://eartrumpet.en.softonic.com/</a>或者微软商店搜索”EarTrumpet”</p><p><img src="/2022/06/28/22-06-28-win10-shi-yong-xiao-ruan-jian-tui-jian/image-20220628030413614.png" alt="微软商店搜索&quot;EarTrumpet&quot;"></p><p>​安装打开之后你的任务栏可能会显示有两个音量图标，其中一个是EarTrumpet，另一个就是系统默认自带的</p><p><img src="/2022/06/28/22-06-28-win10-shi-yong-xiao-ruan-jian-tui-jian/image-20220628025653729.png" alt="任务栏中显示两个音量控制器"></p><p>​想要隐藏系统默认的音量控制器的图标可以打开系统设置-&gt;个性化-&gt;任务栏-&gt;打开或关闭系统图标  找到”音量”关闭即可</p><p><img src="/2022/06/28/22-06-28-win10-shi-yong-xiao-ruan-jian-tui-jian/image-20220628030053228.png" alt="打开系统设置-&gt;个性化-&gt;任务栏-&gt;打开或关闭系统图标"></p><p><img src="/2022/06/28/22-06-28-win10-shi-yong-xiao-ruan-jian-tui-jian/image-20220628030117389.png" alt="关闭系统默认音量图标"></p><h2 id="4-Steam-加速器"><a href="#4-Steam-加速器" class="headerlink" title="4.Steam++ 加速器"></a>4.Steam++ 加速器</h2><p>​不要被名字迷惑了，它可不只是可以加速Steam，还可以加速Twitch、Discord、Github、Origin等等很多平台，而且还附有许多功能脚本，可以增加更多的体验，总之很Nice！</p><p><img src="/2022/06/28/22-06-28-win10-shi-yong-xiao-ruan-jian-tui-jian/image-20220628020739812.png" alt="Steam++ Steam服务"></p><p><img src="/2022/06/28/22-06-28-win10-shi-yong-xiao-ruan-jian-tui-jian/image-20220628020719616.png" alt="Steam++ Github网站"></p><p>下载方式：<a href="https://steampp.net/">Steam++ 官网</a></p><h2 id="5-小孩桌面便签"><a href="#5-小孩桌面便签" class="headerlink" title="5.小孩桌面便签"></a>5.小孩桌面便签</h2><p>​这个软件我也是才开始用，觉得很小巧方便而且好用。主要现在拖延症有点严重，得需要天天时刻提醒一下自己还有啥需要干的（虽然主要还是得靠自制力，不然也就只是作为一个提醒的装饰罢了）。</p><p><img src="/2022/06/28/22-06-28-win10-shi-yong-xiao-ruan-jian-tui-jian/image-20220628014808986.png" alt="小孩桌面便签-1"></p><p><img src="/2022/06/28/22-06-28-win10-shi-yong-xiao-ruan-jian-tui-jian/image-20220628015630963.png" alt="小孩桌面便签-2"></p><p>下载方式：<a href="http://www.notesmaker.com/">小孩桌面便签官网</a></p>]]></content>
      
      
      <categories>
          
          <category> 实用软件or工具分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我有了自己的博客网站</title>
      <link href="/2022/06/06/myfirstblog/"/>
      <url>/2022/06/06/myfirstblog/</url>
      
        <content type="html"><![CDATA[<p>为了更好的记录自己能力的成长，所以用了Hexo框架 + <a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a>主题 + GitHub Pages 做了一个自己的博客网站，以后会记录一些开发游戏的进度、遇到的一些问题及解决方法或者一些有趣的软件和游戏分享。</p><h2 id="创建博客的过程"><a href="#创建博客的过程" class="headerlink" title="创建博客的过程"></a>创建博客的过程</h2><h3 id="1-安装Nods-js"><a href="#1-安装Nods-js" class="headerlink" title="1. 安装Nods.js"></a>1. 安装Nods.js</h3><p>node.js下载官网: <a href="http://nodejs.cn/download/">nodejs官网</a>. </p><p><img src="/2022/06/06/myfirstblog/20220607131352.png" alt="Node.js官网"></p><h3 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2. 安装Git"></a>2. 安装Git</h3><p>在Windows上使用Git，可以从Git官网直接<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a>  然后按默认选项安 装即可。安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就 说明Git安装成功！</p><ul><li>在Git中绑定Github账号，打开“Git Bash”，在命令框中依次输入两行命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span><span class="token function">git</span> config --global user.email email@example.com<span class="token comment"># 其中Your Name和email@example.com替换成上面注册时的账户名和邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​安装之后可以输入以下命令查看是否安装成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> version       <span class="token comment"># 验证git版本</span><span class="token function">node</span> -v           <span class="token comment"># 验证node版本</span><span class="token function">npm</span> -v            <span class="token comment"># 验证npm版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h3><ul><li>以上环境准备好了就可使用 npm 开始安装 Hexo 了，在命令行输入执行如下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装 Hexo 完成后，在指定文件夹下打开“Git Bash”，再执行下列命令，Hexo 将会在该文件夹路径下新建所须要的文件：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init myBlog<span class="token builtin class-name">cd</span> myBlog<span class="token function">npm</span> <span class="token function">install</span><span class="token comment"># myBlog 是新建出来的文件夹项目名，可随意</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>若是上面的命令都没报错的话，就恭喜了，运行 hexo s 命令，其中 s 是 server 的缩写，</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo s  或者  hexo server     <span class="token comment"># 运行服务</span>其他命令（需了解）：hexo g  或者  hexo generate   <span class="token comment"># 生成静态文件</span>hexo d  或者  hexo deploy     <span class="token comment"># 项目部署到Github 需要做好部署环境</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在浏览 器中输入 <a href="http://localhost:4000/">http://localhost:4000</a>  回车就能够在本地预览效果了。</p><p><img src="/2022/06/06/myfirstblog/1188507-20210130123625480-579458690.png" alt="Hexo部署后预览"></p><h3 id="4-安装Matery主题"><a href="#4-安装Matery主题" class="headerlink" title="4. 安装Matery主题"></a>4. 安装Matery主题</h3><p>可以选择到 <a href="https://hexo.io/themes/">Hexo主题官网</a> 挑选一个其他你认为好看的主题，我使用的是 <a href="https://github.com/blinkfox/hexo-theme-matery">Matery主题</a> 按照页面中下方的教程，就可以完成Matery主题的安装。</p><h3 id="5-将项目搭建到GitHub-Pages"><a href="#5-将项目搭建到GitHub-Pages" class="headerlink" title="5. 将项目搭建到GitHub Pages"></a>5. 将项目搭建到GitHub Pages</h3><h4 id="5-1-创建一个-Github-项目"><a href="#5-1-创建一个-Github-项目" class="headerlink" title="5.1 创建一个 Github 项目"></a>5.1 创建一个 Github 项目</h4><ul><li>前往 <a href="https://github.com/">Github 官网</a>，登录Github之后，点击 <code>New repository</code> 创建新项目<strong>（注意Github 仅能使用一个同 名仓库的代码托管一个静态站点，这里注意仓库名一定要是： 用户名.github.io，以后访问你的静态网站的地址）</strong>，点击 <code>Create Repository</code> 确认.</li></ul><p><img src="/2022/06/06/myfirstblog/QQ%E5%9B%BE%E7%89%8720220607152101.png" alt="创建Github项目"></p><ul><li>接着配置SSH key，要使用git工具，输入以下指令，前两行如果已经在安装git时输入过了，就不用输入了</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"邮箱地址"</span>ssh-keygen -t rsa -C <span class="token string">"上面的邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>按照提示需要敲三次回车，就可以生成 ssh key，采用以下指令可以查看到自己的ssh：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>第一次使用还需要确认并添加GitHub到本机SSH可信列表。若返回 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 内容，则证实添加成功。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-2-生成SSH-Key"><a href="#5-2-生成SSH-Key" class="headerlink" title="5.2 生成SSH Key"></a>5.2 生成SSH Key</h4><p>​登陆 Github 上添加刚刚生成的SSH key，按如下步骤添加，右上角点击头像-&gt; settings -&gt; SSH and GPG keys，建立一个新的 SSH key, 标题随便，key 就填刚才生成那个，确认建立，这样在你 的 SSH keys 列表里就会看到你刚刚添加的密钥。</p><p><img src="/2022/06/06/myfirstblog/QQ%E6%88%AA%E5%9B%BE20220607152313.png" alt="生成新的SSH key"></p><h4 id="5-3-开始部署"><a href="#5-3-开始部署" class="headerlink" title="5.3 开始部署"></a>5.3 开始部署</h4><p>此时，本地和Github的工做作得差不了，是时候把它们两个链接起来了。你也能够查看官网的部署 教程。先不着急，部署以前还须要修改配置和安装部署插件。</p><ul><li>第一：打开项目根目录下的 _config.yml 配置文件配置参数。拉到文件末尾，填上以下配置。</li></ul><p><img src="/2022/06/06/myfirstblog/QQ%E5%9B%BE%E7%89%8720220607152344.png" alt="_config.yml 配置文件配置参数"></p><ul><li>第二：安装一个部署插件 hexo-deployer-git，打开“Git Bach”，输如以下指令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>最后执行如下两条命令就能够部署上传啦，如下 g 是 generate 缩写，d 是 deploy 缩写</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g <span class="token comment"># 先生成文件</span>hexo d <span class="token comment"># 部署到Github上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>这时如果一切正常，就可以直接打开浏览器输入 用户名.github.io （也就是规定设置的项目的名称）就可以访问刚才的网站啦。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
