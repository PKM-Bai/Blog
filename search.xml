<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我有了自己的博客网站</title>
      <link href="/2022/06/06/myfirstblog/"/>
      <url>/2022/06/06/myfirstblog/</url>
      
        <content type="html"><![CDATA[<p>为了更好的记录自己能力的成长，所以用了Hexo框架 + <a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a>主题 + GitHub Pages 做了一个自己的博客网站，以后会记录一些开发游戏的进度、遇到的一些问题及解决方法或者一些有趣的软件和游戏分享。</p><h2 id="创建博客的过程"><a href="#创建博客的过程" class="headerlink" title="创建博客的过程"></a>创建博客的过程</h2><h3 id="1-安装Nods-js"><a href="#1-安装Nods-js" class="headerlink" title="1. 安装Nods.js"></a>1. 安装Nods.js</h3><p>node.js下载官网: <a href="http://nodejs.cn/download/">nodejs官网</a>. </p><p><img src="/img/MyFirstBlog/image-20220606175713288.png" alt="Node.js官网"></p><h3 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2. 安装Git"></a>2. 安装Git</h3><p>在Windows上使用Git，可以从Git官网直接<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a>  然后按默认选项安 装即可。安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就 说明Git安装成功！</p><ul><li>在Git中绑定Github账号，打开“Git Bash”，在命令框中依次输入两行命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span><span class="token function">git</span> config --global user.email email@example.com<span class="token comment"># 其中Your Name和email@example.com替换成上面注册时的账户名和邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​安装之后可以输入以下命令查看是否安装成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> version       <span class="token comment"># 验证git版本</span><span class="token function">node</span> -v           <span class="token comment"># 验证node版本</span><span class="token function">npm</span> -v            <span class="token comment"># 验证npm版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h3><ul><li>以上环境准备好了就可使用 npm 开始安装 Hexo 了，在命令行输入执行如下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装 Hexo 完成后，在指定文件夹下打开“Git Bash”，再执行下列命令，Hexo 将会在该文件夹路径下新建所须要的文件：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init myBlog<span class="token builtin class-name">cd</span> myBlog<span class="token function">npm</span> <span class="token function">install</span><span class="token comment"># myBlog 是新建出来的文件夹项目名，可随意</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>若是上面的命令都没报错的话，就恭喜了，运行 hexo s 命令，其中 s 是 server 的缩写，</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo s  或者  hexo server     <span class="token comment"># 运行服务</span>其他命令（需了解）：hexo g  或者  hexo generate   <span class="token comment"># 生成静态文件</span>hexo d  或者  hexo deploy     <span class="token comment"># 项目部署到Github 需要做好部署环境</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在浏览 器中输入 <a href="http://localhost:4000/">http://localhost:4000</a>  回车就能够在本地预览效果了。</p><p><img src="/img/MyFirstBlog/image-20220606191648647.png" alt="Hexo部署后预览"></p><h3 id="4-安装Matery主题"><a href="#4-安装Matery主题" class="headerlink" title="4. 安装Matery主题"></a>4. 安装Matery主题</h3><p>可以选择到 <a href="https://hexo.io/themes/">Hexo主题官网</a> 挑选一个其他你认为好看的主题，我使用的是 <a href="https://github.com/blinkfox/hexo-theme-matery">Matery主题</a> 按照页面中下方的教程，就可以完成Matery主题的安装。</p><h3 id="5-将项目搭建到GitHub-Pages"><a href="#5-将项目搭建到GitHub-Pages" class="headerlink" title="5. 将项目搭建到GitHub Pages"></a>5. 将项目搭建到GitHub Pages</h3><h4 id="5-1-创建一个-Github-项目"><a href="#5-1-创建一个-Github-项目" class="headerlink" title="5.1 创建一个 Github 项目"></a>5.1 创建一个 Github 项目</h4><ul><li>前往 <a href="https://github.com/">Github 官网</a>，登录Github之后，点击 <code>New repository</code> 创建新项目<strong>（注意Github 仅能使用一个同 名仓库的代码托管一个静态站点，这里注意仓库名一定要是： 用户名.github.io，以后访问你的静态网站的地址）</strong>，点击 <code>Create Repository</code> 确认.</li></ul><p><img src="/img/MyFirstBlog/image-20220606195156945.png" alt="创建Github项目"></p><ul><li>接着配置SSH key，要使用git工具，输入以下指令，前两行如果已经在安装git时输入过了，就不用输入了</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"邮箱地址"</span>ssh-keygen -t rsa -C <span class="token string">"上面的邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>按照提示需要敲三次回车，就可以生成 ssh key，采用以下指令可以查看到自己的ssh：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>第一次使用还需要确认并添加GitHub到本机SSH可信列表。若返回 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 内容，则证实添加成功。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-2-生成SSH-Key"><a href="#5-2-生成SSH-Key" class="headerlink" title="5.2 生成SSH Key"></a>5.2 生成SSH Key</h4><p>​登陆 Github 上添加刚刚生成的SSH key，按如下步骤添加，右上角点击头像-&gt; settings -&gt; SSH and GPG keys，建立一个新的 SSH key, 标题随便，key 就填刚才生成那个，确认建立，这样在你 的 SSH keys 列表里就会看到你刚刚添加的密钥。</p><p><img src="/img/MyFirstBlog/image-20220606200159631.png" alt="生成新的SSH key"></p><h4 id="5-3-开始部署"><a href="#5-3-开始部署" class="headerlink" title="5.3 开始部署"></a>5.3 开始部署</h4><p>此时，本地和Github的工做作得差不了，是时候把它们两个链接起来了。你也能够查看官网的部署 教程。先不着急，部署以前还须要修改配置和安装部署插件。</p><ul><li>第一：打开项目根目录下的 _config.yml 配置文件配置参数。拉到文件末尾，填上以下配置。</li></ul><p><img src="/img/MyFirstBlog/image-20220606200530368.png" alt="_config.yml 配置文件配置参数"></p><ul><li>第二：安装一个部署插件 hexo-deployer-git，打开“Git Bach”，输如以下指令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>最后执行如下两条命令就能够部署上传啦，如下 g 是 generate 缩写，d 是 deploy 缩写</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g <span class="token comment"># 先生成文件</span>hexo d <span class="token comment"># 部署到Github上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>这时如果一切正常，就可以直接打开浏览器输入 用户名.github.io （也就是规定设置的项目的名称）就可以访问刚才的网站啦。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
